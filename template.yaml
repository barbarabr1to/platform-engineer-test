AWSTemplateFormatVersion: 2010-09-09


Resources:

  ##########################################################
  # Bucket S3 para armazenar arquivos brutos e processados #
  ##########################################################
  MainBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: bucket-data-processing-id # mudar nome
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  # Bucket policy para garantir conexões seguras (HTTPS)
  MainBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MainBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowSSLRequestsOnly
          Effect: Deny
          Principal: "*"
          Action: s3:*
          Resource: !Sub 'arn:aws:s3:::${MainBucket}/*'
          Condition:
            Bool:
              aws:SecureTransport: 'false'
  
  ##############################################################################
  # Regra para acionar a função Lambda ao haver upload de arquivo no bucket S3 #
  ##############################################################################
  Rule:
    Type: AWS::Events::Rule
    Properties:
      Name: rule-data-processing
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref MainBucket
      Targets:
        - Arn: !GetAtt Function.Arn
          Id: "LambdaTarget"

  # Permissão para a regra invocar a função Lambda
  FunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: arn:aws:lambda:us-east-1:231140758045:function:function-data-processing
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Rule.Arn
  
  #######################################################################
  # Function para acionar o Glue Job quando um novo arquivo é carregado #
  #######################################################################
  Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: function-data-processing
      Timeout: 15
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt FunctionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          glue_client = boto3.client('glue')

          def lambda_handler(event, context):
              # Extrair informações do evento EventBridge
              detail = event['detail']
              bucket = detail['bucket']['name']
              key = detail['object']['key']

              # Iniciar o trabalho do Glue
              response = glue_client.start_job_run(
                  JobName='job-data-processing',
                  Arguments={
                      '--S3_INPUT_PATH': f's3://{bucket}/{key}',
                      '--S3_OUTPUT_PATH': f's3://{bucket}/processed/'
                  }
              )
              print(":: response :: ", response)

              return {
                  'statusCode': 200,
                  'body': json.dumps('Job Iniciado com sucesso!')
              }
  
  # Role para execução da função
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3GlueAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowStartJob
                Effect: Allow
                Action:
                  - glue:StartJobRun
                Resource:
                  - !Sub arn:aws:s3:::${MainBucket}
                  - !Sub arn:aws:s3:::${MainBucket}/*
              - Sid: AllowGetObject
                Effect: Allow
                Action:
                  - glue:StartJobRun
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:job/${Job}"
              - Sid: AllowLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"
  
  #################################
  # Glue job para processar dados #
  #################################
  Job:
    Type: AWS::Glue::Job
    Properties:
      Name: job-data-processing
      Role: !GetAtt JobRole.Arn
      Command:
        Name: glueetl
        PythonVersion: '3'
        ScriptLocation: !Sub "s3://${ScriptBucket}/job_script.py"
      GlueVersion: '3.0'
      DefaultArguments:
        --job-language: python
        --enable-metrics: true
        --enable-continuous-cloudwatch-log: true
        --enable-observability-metrics: true
        --TempDir: !Sub "s3://${ScriptBucket}/tmp/"
        --additional-python-modules: "boto3==1.18.50,pandas==1.3.2,numpy==1.19.5" 
      LogUri: !Sub "arn:aws:s3:::${ScriptBucket}/logs"
  
  # Role para execução de job
  JobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GlueS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${MainBucket}"
                  - !Sub "arn:aws:s3:::${MainBucket}/*"
                  - !Sub "arn:aws:s3:::${ScriptBucket}"
                  - !Sub "arn:aws:s3:::${ScriptBucket}/*"
        - PolicyName: PutLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: "*"
  
  ################################################################
  # Bucket S3 para armazenar script de processamento do Glue job #
  ################################################################
  ScriptBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: bucket-script-job-id # mudar nome
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
  
  # Bucket policy para garantir conexões seguras (HTTPS)
  ScriptBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ScriptBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowSSLRequestsOnly
          Effect: Deny
          Principal: "*"
          Action: s3:*
          Resource: !Sub 'arn:aws:s3:::${ScriptBucket}/*'
          Condition:
            Bool:
              aws:SecureTransport: 'false'